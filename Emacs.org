#+title Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Startup performance
#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Setup
** OS X Meta rebinding
Changing the command key to be the META key in Emacs.

#+begin_src emacs-lisp

  (setq mac-command-modifier 'meta)

#+end_src
** Env variables

A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.
Particularly useful for OS X.
https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp

  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :init
      (setq exec-path-from-shell-arguments '("-l"))
      (exec-path-from-shell-initialize))
    )

#+end_src

** Package management

#+begin_src emacs-lisp

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ;; Comment/uncomment this line to enable MELPA Stable if desired.
                           ;; See `package-archive-priorities`
                           ;; and `package-pinned-packages`.
                           ;; Most users will not need or want to do this.
                           ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  ;; Update package contents right away if not updated
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install use-package right away if not installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; All packages with use-package are :ensure t
  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Basic UI configuration

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)       ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Improve scrolling
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX

  ;; Make new buffers split vertically instead of horizontally
  ;; Taken from https://stackoverflow.com/a/2081978/3802589
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)

#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :init
    (load-theme 'doom-palenight t)
    ;; Not sure what this does exactly... and if I'm calling it correctly
    (doom-themes-visual-bell-config)
    )



#+end_src

** Font

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Mono" :height 150)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :weight 'light
                      :height 150)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      :font "Iosevka Aile"
                      :height 150
                      :weight 'light)

#+end_src

** Modeline
*** Basic config

Set display time format.
#+begin_src emacs-lisp
  ;; Not sure if this is doing anything...
  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)
#+end_src

Display column number in mode line.
#+begin_src emacs-lisp

  (column-number-mode)

#+end_src

*** Enable Mode Diminish

The [[https:https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** Doom modeline

#+begin_src emacs-lisp

  ;; Necessary for doom modeline
  (use-package all-the-icons)

  ;; Doom modeline
  ;; You must run (M-x all-the-icons-install-fonts) one time after
  ;; installing this package!
  ;; Not sure if necessary with the previous use-package call

  ;; Double check what this is for lol
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil)
    )

#+end_src

* Editor
** Restore buffers as they were when closed
#+begin_src emacs-lisp

  (desktop-save-mode 1)

#+end_src
** Typed text replaces selection
Probably not necessary with evil or similar.
#+begin_src emacs-lisp

  (delete-selection-mode 1)

#+end_src
** Display line number
#+begin_src emacs-lisp

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** Expand region
Increasingly select more (might be unnecessary if using other things, like evil?)

#+begin_src emacs-lisp

  ;; expand-region, let's you increase the selection by regions
  (use-package expand-region
    :ensure t
    :bind ("M-<up>" . er/expand-region))

#+end_src

** Select next occurrence
#+begin_src emacs-lisp

  ;; Multiple-cursors, let's you have multiple cursors
  (use-package multiple-cursors
    :ensure t
    :bind
    (("C->"         . mc/mark-next-like-this)
     ("C-<"         . mc/mark-previous-like-this)
     ("C-c C-<"     . mc/mark-all-like-this)
     ("C-S-c C-S-c"   . mc/edit-lines)
     )
    )

#+end_src

** Transpose lines

#+begin_src emacs-lisp

  ;; Taken from https://github.com/anachronic/emacs.d/blob/master/elisp/setup-editor.el
  ;; Let's you transpose lines like IntelliJ
  (defun ach-move-line-up ()
    "Transpose the current line with the one above leaving the cursor in the first line."
    (interactive)
    (let ((col (current-column)))
      (transpose-lines 1)
      (forward-line -2)
      (move-beginning-of-line 1)
      (forward-char col)))


  (defun ach-move-line-down ()
    "Transpose the current line with the one below leaving the cursor in the first line."
    (interactive)
    (let ((col (current-column)))
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)
      (move-beginning-of-line 1)
      (forward-char col)))

  (global-set-key (kbd "C-S-<up>") 'ach-move-line-up)
  (global-set-key (kbd "C-S-<down>") 'ach-move-line-down)

#+end_src

** Delete whole line
Probably not necessary with evil or similar.
#+begin_src emacs-lisp

  (add-hook 'after-init-hook
            '(lambda ()
               (global-set-key (kbd "C-<backspace>") 'kill-whole-line)
               )
            )

#+end_src
** Duplicate line
#+begin_src emacs-lisp

  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank)
    )
  (global-set-key (kbd "C-d") 'duplicate-line)

#+end_src

** Delete trailing whitespace on save
Not entirely sure how these two interact with each other
#+begin_src emacs-lisp

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Automatically clean whitespaces
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))

#+end_src

** Auto-save
#+begin_src emacs-lisp

  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

#+end_src

** Fill column
#+begin_src emacs-lisp

  (setq-default fill-column 100)

#+end_src

* File Management
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)

    :custom
    ; group-by-directory-first is not available in OS X apparently
    ; https://github.com/d12frosted/homebrew-emacs-plus/issues/383#issuecomment-899157143
    (setq insert-directory-program "gls" dired-use-ls-dired t)
    (setq dired-listing-switches "-agho --group-directories-first")
    (setq ;;dired-omit-files "^\\.[^.].*"
     dired-omit-verbose nil
     dired-hide-details-hide-symlink-targets nil
     delete-by-moving-to-trash t)
    :config
    (setq dired-dwim-target t)
    :bind ("C-x C-j" . dired-jump)
    )
#+end_src

Only have one buffer for dired
#+begin_src emacs-lisp
  (use-package dired-single)
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
    )
#+end_src

* Keybinds
** Keybinds panel (which-key)
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

** General
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer tdtron/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"
      )
    )
#+end_src

** Evil

#+begin_src emacs-lisp
  ;; Sets initial evil mode to emacs for these modes
  ;; (defun tdtron/evil-hook ()
  ;;   (dolist (mode '(custom-mode
  ;;                   eshell-mode
  ;;                   git-rebase-mode
  ;;                   term-mode))
  ;;     (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)

    ;; :hook (evil-mode . tdtron/evil-hook)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
          (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))
#+end_src

* Stateful keymaps
#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-coq ()
    "Coq actions"
    ("j" proof-assert-next-command-interactive "Next")
    ("k" proof-undo-last-successful-command "Undo")
    ("f" nil "finished" :exit t)
    )

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t)
    )

  (tdtron/leader-keys
    "c" '(hydra-coq/body :which-key "coq")
    )

  (tdtron/leader-keys
    "s" '(hydra-text-scale/body :which-key "scale text"))

#+end_src
* Org mode
** General
*** Font
#+begin_src emacs-lisp

  (defun tdtron/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src
*** Setup
#+begin_src emacs-lisp

  ;; Turn on indentation and auto-fill mode for Org files
  (defun tdtron/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (diminish org-indent-mode)
    )

  (use-package org
    :defer t
    :commands (org-capture org-agenda)
    :hook (org-mode . tdtron/org-mode-setup)
    ;; Consider using :custom instead and not setq
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-cycle-separator-lines 2)
    (setq org-agenda-files
          '("~/Projects/Coq-PL/Org/"))
    (tdtron/org-font-setup)
    :custom
    ;; Check whether it's worth having this shift support
    (org-support-shift-select t)

    )

#+end_src
*** UI
#+begin_src emacs-lisp

  ;; Change headers * for other symbols
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))


  (defun tdtron/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . tdtron/org-mode-visual-fill))

#+end_src
** Configure Babel Languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       ;; Coq apparently is not working with Babel - https://emacs.stackexchange.com/q/58369/34589
       ;; With newer Coq versions, the file 'coq-inferior.el' is no longer packaged with it
       ;; (coq . t)
       )
     )
    )

#+end_src

** Configure templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    ;; See org lang load - TLDR: Coq is not working with babel rn
    ;; (add-to-list 'org-structure-template-alist '("coq" . "src coq"))
    )


#+end_src

** Org Roam
#+begin_src emacs-lisp

  ;; Let's you insert without confirming.
  ;; Uses the first template for the immediate nodes (ie. default right now)
  ;; Source: https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)

    :config
    (org-roam-db-autosync-mode)

    :custom
    (org-roam-directory "~/Projects/Notes")
    (org-roam-completion-everywhere t)
    (org-roam-completion-system 'default)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)

       ("p" "Paper" plain
        (file "~/Projects/Notes/templates/PaperTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)

       ("q" "Question" plain
        (file "~/Projects/Notes/templates/QuestionTemplate.org")
        :if-new (file+head "~/Projects/Notes/questions/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+filetags: Question")
        :unnarrowed t)

       )
     )
    :bind (("C-c r l" . org-roam-buffer-toggle)
           ("C-c r f" . org-roam-node-find)
           ("C-c r g" . org-roam-graph)
           ("C-c r i" . org-roam-node-insert)
           ("C-c r I" . org-roam-node-insert-immediate)
           ("C-c r c" . org-roam-capture)
           ;; Dailies
           ("C-c r j" . org-roam-dailies-capture-today)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           )
    )
#+end_src

* Better completion with Ivy

#+begin_src emacs-lisp

  ;; Ivy
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-f" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1) ;; This sets everything up, including remapping find file to use Ivy
    )

  ;; Ivy rich
  (use-package ivy-rich
    :init (ivy-rich-mode 1)
    )


  ;; Counsel
  ;; General user interface (UI) to narrow down a list of selections by typing.
  ;; Same devs as Ivy
  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^


  ;; Swiper
  ;; I think Swiper comes with ivy installation
  (use-package swiper)

#+end_src

* Productivity
** Syntax checking
#+begin_src emacs-lisp

  ;; Syntax check
  (use-package flycheck
    :defer t
    :hook (coq-mode . flycheck-mode))

#+end_src
** Snippets
#+begin_src emacs-lisp

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

#+end_src
** Better parens
#+begin_src emacs-lisp

  (use-package smartparens
    :hook (prog-mode . smartparens-mode))

  ;; Highlight matching parens
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

#+end_src
** Better delimiters
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    )

#+end_src
** Commenting
#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src
* Development
** Project management
#+begin_src emacs-lisp
  (defun tdtron/switch-project-action ()
    "Switch to a workspace with the project name and start `magit-status'."
    ;; TODO: Switch to EXWM workspace 1?
    (persp-switch (projectile-project-name))
    (magit-status))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :demand t
    :bind ("C-M-o" . projectile-find-file)
    :bind-keymap
    ("C-c p" . projectile-command-map)

    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'tdtron/switch-project-action)
    ;; (setq projectile-switch-project-action #'projectile-dired)

    )

  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode)
    :bind ("C-S-f" . counsel-projectile-rg)
    )

#+end_src
** Git
#+begin_src emacs-lisp

  (use-package magit
    :bind ("C-M-;" . magit-status)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

    ;; Forge
    ;; (use-package forge)

  (tdtron/leader-keys
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)
#+end_src

** Coq

#+begin_src emacs-lisp

  (use-package proof-general
    :config
    (setq coq-prog-name "/Users/tomas/.opam/_coq-platform_.2021.02.1/bin/coqtop")
    (setq proof-three-window-mode-policy 'hybrid) ;; Set default layout to hybrid
    (setq proof-three-window-enable t) ;; Set 3 window enabled
    )

  (use-package company-coq
    :init
    ;; Load company-coq when opening Coq files
    (add-hook 'coq-mode-hook #'company-coq-mode))


#+end_src
** Emacs Lisp

*** Describe with more detail (helpful)
#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src

*** <esc> escapes prompts
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
